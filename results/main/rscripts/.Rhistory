text.color <- ifelse(nat.meansEIC$expression[order(nat.meansEIC$Mean)] %in% factives, '#D55E00',
ifelse(nat.meansEIC$expression[order(nat.meansEIC$Mean)] %in% fillers, "gray80", "black"))
text.color
t$expression = factor(t$expression, levels = nat.meansEIC$expression[order(nat.meansEIC$Mean)], ordered = TRUE)
# plot of naturalness means, with participants' individual responses
ggplot(nat.meansEIC, aes(x=expression, y=Mean)) +
geom_violin(data=t[t$context == "explicitIgnorance",],aes(x=expression, y=response),
scale="width",color="gray80", fill = "gray80") +
geom_point(aes(group = ps, fill = ps), shape=21,stroke=.5,size=3, color="black") +
scale_fill_manual(values=c('#D55E00','gray80','black')) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
guides(fill=FALSE) +
theme(legend.position="top", panel.grid.major.x = element_blank()) +
ylab("Mean naturalness rating \n in explicit ignorance context") +
xlab("Expression") +
#theme_dark() +
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1, color = text.color))
ggsave("../graphs/explicit-ignorance-naturalness-by-predicate.pdf",height=4,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
this.dir
# load clean data
d = read_tsv("../data/cd.tsv")
# load the pairwise comparison
pairwise = read_csv(file="../models/analysis1/pairwise1.csv")
pairwise
# which differences are observed?
summary(pairwise$.value)
# select relevant columns for printing
pairwise_reduced = pairwise %>%
select(c(contrast, .value, .lower, .upper))
pairwise_reduced
tableApp1 = print(xtable(pairwise_reduced),
#only.contents = T,
include.rownames=FALSE,
include.colnames=TRUE,
tabular.environment="longtable",
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
# load required packages
library(tidyverse)
library(tidybayes)
library(dplyr)
library(dichromat)
library(forcats)
library(ggrepel)
library(brms)
library(knitr)
library(emmeans)
library(lme4)
library(lmerTest)
library(padr)
library(performance)
library(MuMIn)
library(xtable)
# load the pairwise comparison
pairwise = read_csv(file="../models/analysis1/pairwise1.csv")
pairwise
# which differences are observed?
summary(pairwise$.value)
# select relevant columns for printing
pairwise_reduced = pairwise %>%
select(c(contrast, .value, .lower, .upper))
pairwise_reduced
tableApp1 = print(xtable(pairwise_reduced),
#only.contents = T,
include.rownames=FALSE,
include.colnames=TRUE,
tabular.environment="longtable",
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
# write the table, print in latex document in supplement
write(tableApp1, "../models/analysis1/fullModelOutput/analysis1.tex")
# select needed columns from the pairwise comparison for the table input
tableInput = pairwise %>%
select(c(contrast, .value, .lower, .upper, first, second)) %>%
select(-c(contrast))
tableInput$second = trimws(tableInput$second)
tableInput
# create separate dataframes for each expression
predicates = unique(as.character(t$expression))
predicates
predicates <- replace(predicates, 9, "be.annoyed")
predicates <- replace(predicates, 14, "be.right")
predicates
# make tableInput a dataframe
tableInput <- as.data.frame(tableInput)
tableInput = tableInput %>%
mutate(first = recode(first,"be annoyed" = "be.annoyed","be right" = "be.right")) %>%
mutate(second = recode(second,"be annoyed" = "be.annoyed","be right" = "be.right"))
tableInput
# create a separate dataframe for each predicate
for (p in predicates) {
assign(paste("data.", p, sep=""), subset(tableInput, tableInput$first == p | tableInput$second == p))
assign(paste("data.", p, sep=""), get(paste("data.", p, sep="")) %>% mutate(expression = c(p)))
write(paste("data.",p,sep=""),file=paste("../models/analysis1/data.",p,sep=""))
}
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
# get the mean naturalness for each predicate (tmp dataframe)
tmp = t %>%
filter(context == "explicitIgnorance") %>%
group_by(expression) %>%
summarize(Mean = mean(response)) %>%
mutate(expression = fct_reorder(as.factor(expression),Mean))
tmp
tmp = tmp %>%
mutate(expression = recode(expression,"be annoyed" = "be.annoyed","be right" = "be.right"))
tmp
levels(tmp$expression)
tableData$expression = factor(tableData$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
tableData
levels(tableData$expression)
tableData$expression = factor(tableData$expression, ordered = FALSE )
str(tableData$expression)
str(tmp$expression)
# join the tmp dataframe with tableData
tableData = left_join(tableData, tmp)
tableData
tableData$comparisonExpression = factor(tableData$comparisonExpression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
# sort by mean (first column) and comparisonExpression (second column)
tableData <- tableData %>% arrange(Mean, comparisonExpression)
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & tableData$value <= -1.5, "\\cellcolor{yellow1}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -1.5 < tableData$value & tableData$value <= -0.5, "\\cellcolor{yellow2}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -.5 < tableData$value & tableData$value <= 0, "\\cellcolor{yellow3}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & tableData$value >= 1.5, "\\cellcolor{purple1}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & 1.5 > tableData$value & tableData$value > 0.5, "\\cellcolor{purple2}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & .5 > tableData$value & tableData$value >= 0, "\\cellcolor{purple3}", "error")))))))
# select relevant columsn to make the latex table
tableData = tableData %>%
select(c(expression,comparisonExpression,cellColor))
# spread the data wide
tableData = tableData %>%
spread(comparisonExpression,cellColor)
# replace NA with gray cells and expressions with color coded versions
tableData = tableData %>% mutate(across(everything(), ~replace_na(.x, "\\cellcolor{black}")))
tableData = tableData %>%
mutate(expression = recode(expression,
"continue" = "\\color{gray}{\\bf continue}\\color{black}",
"too" = "\\color{gray}{\\bf too}\\color{black}",
"also" = "\\color{gray}{\\bf also}\\color{black}",
"again" = "\\color{gray}{\\bf again}\\color{black}",
"stop" = "\\color{gray}{\\bf stop}\\color{black}",
"cleft" = "\\color{gray}{\\bf cleft}\\color{black}",
"be.annoyed" = "\\color{orange}{\\bf be annoyed}\\color{black}",
"know" = "\\color{orange}{\\bf know}\\color{black}",
"demonstrate" = "\\color{black}{\\bf demonstrate}\\color{black}",
"pretend" = "\\color{black}{\\bf pretend}\\color{black}",
"inform" = "\\color{black}{\\bf inform}\\color{black}",
"confess" = "\\color{black}{\\bf confess}\\color{black}",
"see" = "\\color{orange}{\\bf see}\\color{black}",
"acknowledge" = "\\color{black}{\\bf acknowledge}\\color{black}",
"discover" = "\\color{orange}{\\bf discover}\\color{black}",
"admit" = "\\color{black}{\\bf admit}\\color{black}",
"hear" = "\\color{black}{\\bf hear}\\color{black}",
"prove" = "\\color{black}{\\bf prove}\\color{black}",
"reveal" = "\\color{orange}{\\bf reveal}\\color{black}",
"announce" = "\\color{black}{\\bf announce}\\color{black}",
"be.right" = "\\color{black}{\\bf be right}\\color{black}",
"establish" = "\\color{black}{\\bf establish}\\color{black}",
"confirm" = "\\color{black}{\\bf confirm}\\color{black}",
"suggest" = "\\color{black}{\\bf suggest}\\color{black}",
"think" = "\\color{black}{\\bf think}\\color{black}",
"say" = "\\color{black}{\\bf say}\\color{black}"
))
# now create the table to include in the paper
table1 = print(xtable(tableData),
only.contents = T,
include.rownames=FALSE,
include.colnames=FALSE,
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
write(table1, "../models/analysis1/table1.tex")
# load the pairwise comparison
pairwise = read_csv(file="../models/analysis1/pairwise1.csv")
pairwise
# which differences are observed?
summary(pairwise$.value)
# select relevant columns for printing
pairwise_reduced = pairwise %>%
select(c(contrast, .value, .lower, .upper))
pairwise_reduced
tableApp1 = print(xtable(pairwise_reduced),
#only.contents = T,
include.rownames=FALSE,
include.colnames=TRUE,
tabular.environment="longtable",
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
# write the table, print in latex document in supplement
write(tableApp1, "../models/analysis1/fullModelOutput/analysis1.tex")
# select needed columns from the pairwise comparison for the table input
tableInput = pairwise %>%
select(c(contrast, .value, .lower, .upper, first, second)) %>%
select(-c(contrast))
tableInput$second = trimws(tableInput$second)
tableInput
# create separate dataframes for each expression
predicates = unique(as.character(t$expression))
predicates
predicates <- replace(predicates, 9, "be.annoyed")
predicates <- replace(predicates, 14, "be.right")
predicates
# make tableInput a dataframe
tableInput <- as.data.frame(tableInput)
tableInput = tableInput %>%
mutate(first = recode(first,"be annoyed" = "be.annoyed","be right" = "be.right")) %>%
mutate(second = recode(second,"be annoyed" = "be.annoyed","be right" = "be.right"))
tableInput
# create a separate dataframe for each predicate
for (p in predicates) {
assign(paste("data.", p, sep=""), subset(tableInput, tableInput$first == p | tableInput$second == p))
assign(paste("data.", p, sep=""), get(paste("data.", p, sep="")) %>% mutate(expression = c(p)))
write(paste("data.",p,sep=""),file=paste("../models/analysis1/data.",p,sep=""))
}
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
# get the mean naturalness for each predicate (tmp dataframe)
tmp = t %>%
filter(context == "explicitIgnorance") %>%
group_by(expression) %>%
summarize(Mean = mean(response)) %>%
mutate(expression = fct_reorder(as.factor(expression),Mean))
tmp
tmp = tmp %>%
mutate(expression = recode(expression,"be annoyed" = "be.annoyed","be right" = "be.right"))
tmp
levels(tmp$expression)
tableData$expression = factor(tableData$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
tableData
levels(tableData$expression)
tableData$expression = factor(tableData$expression, ordered = FALSE )
str(tableData$expression)
str(tmp$expression)
# join the tmp dataframe with tableData
tableData = left_join(tableData, tmp)
tableData
tableData$comparisonExpression = factor(tableData$comparisonExpression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
# sort by mean (first column) and comparisonExpression (second column)
tableData <- tableData %>% arrange(Mean, comparisonExpression)
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & tableData$value <= -1.5, "\\cellcolor{yellow1}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -1.5 < tableData$value & tableData$value <= -0.5, "\\cellcolor{yellow2}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -.5 < tableData$value & tableData$value <= 0, "\\cellcolor{yellow3}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & tableData$value >= 1.5, "\\cellcolor{purple1}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & 1.5 > tableData$value & tableData$value > 0.5, "\\cellcolor{purple2}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & .5 > tableData$value & tableData$value >= 0, "\\cellcolor{purple3}", "error")))))))
# select relevant columsn to make the latex table
tableData = tableData %>%
select(c(expression,comparisonExpression,cellColor))
# spread the data wide
tableData = tableData %>%
spread(comparisonExpression,cellColor)
# replace NA with gray cells and expressions with color coded versions
tableData = tableData %>% mutate(across(everything(), ~replace_na(.x, "\\cellcolor{black}")))
tableData = tableData %>%
mutate(expression = recode(expression,
"continue" = "\\color{gray}{\\bf continue}\\color{black}",
"too" = "\\color{gray}{\\bf too}\\color{black}",
"also" = "\\color{gray}{\\bf also}\\color{black}",
"again" = "\\color{gray}{\\bf again}\\color{black}",
"stop" = "\\color{gray}{\\bf stop}\\color{black}",
"cleft" = "\\color{gray}{\\bf cleft}\\color{black}",
"be.annoyed" = "\\color{orange}{\\bf be annoyed}\\color{black}",
"know" = "\\color{orange}{\\bf know}\\color{black}",
"demonstrate" = "\\color{black}{\\bf demonstrate}\\color{black}",
"pretend" = "\\color{black}{\\bf pretend}\\color{black}",
"inform" = "\\color{black}{\\bf inform}\\color{black}",
"confess" = "\\color{black}{\\bf confess}\\color{black}",
"see" = "\\color{orange}{\\bf see}\\color{black}",
"acknowledge" = "\\color{black}{\\bf acknowledge}\\color{black}",
"discover" = "\\color{orange}{\\bf discover}\\color{black}",
"admit" = "\\color{black}{\\bf admit}\\color{black}",
"hear" = "\\color{black}{\\bf hear}\\color{black}",
"prove" = "\\color{black}{\\bf prove}\\color{black}",
"reveal" = "\\color{orange}{\\bf reveal}\\color{black}",
"announce" = "\\color{black}{\\bf announce}\\color{black}",
"be.right" = "\\color{black}{\\bf be right}\\color{black}",
"establish" = "\\color{black}{\\bf establish}\\color{black}",
"confirm" = "\\color{black}{\\bf confirm}\\color{black}",
"suggest" = "\\color{black}{\\bf suggest}\\color{black}",
"think" = "\\color{black}{\\bf think}\\color{black}",
"say" = "\\color{black}{\\bf say}\\color{black}"
))
# now create the table to include in the paper
table1 = print(xtable(tableData),
only.contents = T,
include.rownames=FALSE,
include.colnames=FALSE,
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
write(table1, "../models/analysis1/table1.tex")
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
library(ggrepel)
library(dichromat)
library(forcats)
library(ggrepel)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_tsv("../data/cd.tsv")
names(d)
table(d$context)
length(unique(d$participantID)) #370 participants
# calculate mean naturalness rating by predicate and context
table(d$expression)
table(d$context)  #explicit ignorance / factL / factH
nat.means = d %>%
filter(expression != "practice" & expression != "controlGood1" & expression != "controlGood2" & expression != "controlGood3" & expression != "controlGood4") %>%
filter(expression != "also" & expression != "too" & expression != "again" & expression != "cleft" &
expression != "stop" & expression != "continue") %>%
group_by(expression,context) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
ungroup %>%
select(-c(CILow,CIHigh)) %>%
mutate(context = as.factor(context))
nat.means
table(nat.means$context)
nat.means$expression <- as.factor(nat.means$expression)
levels(nat.means$expression)
t = d %>%
filter(expression != "practice" & expression != "controlGood1" & expression != "controlGood2" & expression != "controlGood3" & expression != "controlGood4") %>%
filter(expression != "also" & expression != "too" & expression != "again" & expression != "cleft" &
expression != "stop" & expression != "continue") %>%
mutate(context = as.factor(context))
levels(t$context)
# order predicates by difference in EIC-"high" rating
tmp.EIC <- t %>%
filter(context == "explicitIgnorance") %>%
group_by(expression) %>%
summarize(Mean.EIC = mean(response))
tmp.EIC
tmp.HIGH <- t %>%
filter(context == "factH") %>%
group_by(expression) %>%
summarize(Mean.HIGH = mean(response))
tmp.HIGH
tmp = left_join(tmp.EIC,tmp.HIGH)
tmp
tmp$Diff = tmp$Mean.EIC-tmp$Mean.HIGH
tmp
tmp = tmp %>%
mutate(expression = fct_reorder(as.factor(expression),Diff))
tmp
levels(tmp$expression)
nat.means$expression = factor(nat.means$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
t$expression = factor(t$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
levels(nat.means$expression)
levels(t$expression)
# order the contexts: EIC, low, high
levels(nat.means$context)
nat.means$context = factor(nat.means$context, levels = c("explicitIgnorance", "factL", "factH"))
levels(t$context)
t$context = factor(t$context, levels = c("explicitIgnorance", "factL", "factH"))
# color code the expressions
factives <- c("know", "discover", "be annoyed", "reveal", "see")
fillers <- c("too", "also","cleft","again","stop", "continue")
fill.color <- ifelse(levels(nat.means$expression) %in% factives, '#D55E00', "black")
fill.color
# to color the facets differently
library(ggh4x)
strip <- strip_themed(background_x = elem_list_rect(fill = fill.color))
nat.means
# join results of statistical analysis with nat.means
contrasts = read_csv("../data/values.csv")
contrasts
#view(contrasts)
contrasts = contrasts %>%
mutate(expression = recode(expression,"be.annoyed" = "be annoyed", "be.right" = "be right"))
contrasts
contrasts$context = factor(contrasts$context, levels = c("explicitIgnorance", "factL", "factH"))
contrasts$expression = as.factor(contrasts$expression)
str(contrasts$hdi)
# make hdi column the linetype column (numeric reference to linetype didn't work)
contrasts = contrasts %>%
mutate(linetype = case_when(hdi == 0 ~ "blank",
hdi == 1 ~ "solid",
TRUE ~ "ERROR")) %>%
select(-c(hdi))
contrasts
# join contrasts with nat.means
nrow(nat.means) #60
nrow(contrasts) #60
nat.means = merge(nat.means,contrasts)
nrow(nat.means) #60
# violinplot
ggplot() +
geom_violin(data=t, aes(x=context, y=response, fill = context), scale="width", linewidth = 0) +
geom_point(data=nat.means, aes(x=context, y=Mean, fill = context), shape=21,stroke=.5,size=2, color="black") +
geom_errorbar(data=nat.means,aes(x=context,ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_fill_manual(values=c('gray80',"#56B4E9",'#F0E442'),
name = "Context",
labels=c('explicit ignorance', 'lower prior probability','higher prior probability')) +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(limits = c(-.15,1), breaks = seq(0,1,.2), labels = c("0",".2",".4",".6",".8","1")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
theme(legend.position="top") +
guides(linetype = "none") +
ylab("Mean naturalness rating") +
xlab("Context") +
facet_wrap2(. ~ expression, nrow = 2, strip = strip) +
theme(panel.grid.minor = element_blank()) +
theme(strip.background = element_rect(fill="white")) +
theme(strip.text = element_text(color = "white")) +
geom_segment(data = nat.means, aes(x=x,xend=xend,y=y,yend=yend, linetype = linetype)) +
scale_linetype_manual(values =c(0,1))
# violinplot
ggplot() +
geom_violin(data=t, aes(x=context, y=response, fill = context), scale="width", linewidth = 0) +
geom_point(data=nat.means, aes(x=context, y=Mean, fill = context), shape=21,stroke=.5,size=2, color="black") +
geom_errorbar(data=nat.means,aes(x=context,ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_fill_manual(values=c('gray80','#F0E442',"#56B4E9"),
name = "Context",
labels=c('explicit ignorance', 'lower prior probability','higher prior probability')) +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(limits = c(-.15,1), breaks = seq(0,1,.2), labels = c("0",".2",".4",".6",".8","1")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
theme(legend.position="top") +
guides(linetype = "none") +
ylab("Mean naturalness rating") +
xlab("Context") +
facet_wrap2(. ~ expression, nrow = 2, strip = strip) +
theme(panel.grid.minor = element_blank()) +
theme(strip.background = element_rect(fill="white")) +
theme(strip.text = element_text(color = "white")) +
geom_segment(data = nat.means, aes(x=x,xend=xend,y=y,yend=yend, linetype = linetype)) +
scale_linetype_manual(values =c(0,1))
ggsave("../graphs/naturalness-by-context-and-predicate-with-stats.pdf",height=4.5,width=9)
