.26 * (-15)
(.26 * (-15)) + (.74 * 5)
R.Version()
pbinom(507,111,.2)
pnorm(700, mean=507, sd=111)
pnorm(700,507,111)
1-pnorm(700,507,111)
pnorm(65,mean=65,sd=2.8)
pnorm(65,mean=69,sd=2.8)
1-pnorm(75,69,2.8)
pnorm(72,69,2.8)-(1-pnorm(66,69,2.8))
pnorm(72,69,2.8)
pnorm(66,69,2.8)
pnorm(75,69,2.8)
pnorm(72,69,2.8)
pnorm(66,69,2.8)
1-pnorm(66,69,2.8)
pnorm(72,69,2.8)-(1-pnorm(66,69,2.8))
pnorm(72,69,2.8)
1-pnorm(66,69,2.8)
pnorm(72,69,2.8)
pnorm(66,69,2.8)
1-pnorm(66,69,2.8)
1-pnorm(75,69,2.8)
pnorm(65,mean=69,sd=2.8)
pnorm(72,69,2.8)-pnorm(66,69,2.8)
qnorm(0.98, mean=507, sd=111)
help(pnorm)
qnorm(.005,69,2.8)
1-qnorm(.0025,69,2.8)
qnorm(.9975,69,2.8)
qnorm(.9975,69,2.8)
qnorm(.005,69,2.8)
qnorm(.9975,69,2.8)
pnorm(8,20,.5)
pnorm(8,20,2.24)
pnorm(30.5,22.5,sd=4.5)
1 - pnorm(30.5,22.5,sd=4.5)
library(jsonlite)
library(tidyverse)
library(rwebppl)
install.packages("rwebppl")
library(jsonlite)
library(tidyverse)
library(rwebppl)
install.packages("rwebppl")
R.Version()
R.Version()
R.Version()
R.version()
R. Version()
R.Version()
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
library(ggrepel)
library(dichromat)
library(forcats)
library(ggrepel)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_tsv("../data/cd.tsv")
# calculate mean naturalness rating by predicate and context
table(d$expression)
table(d$context)  #explicit ignorance / factL / factH
nat.means = d %>%
filter(expression != "practice" & expression != "controlGood1" & expression != "controlGood2" & expression != "controlGood3" & expression != "controlGood4") %>%
filter(expression != "also" & expression != "too" & expression != "again" & expression != "cleft" &
expression != "stop" & expression != "continue") %>%
group_by(expression,context) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
ungroup %>%
select(-c(CILow,CIHigh)) %>%
mutate(context = as.factor(context))
nat.means
table(nat.means$context)
nat.means$expression <- as.factor(nat.means$expression)
levels(nat.means$expression)
t = d %>%
filter(expression != "practice" & expression != "controlGood1" & expression != "controlGood2" & expression != "controlGood3" & expression != "controlGood4") %>%
filter(expression != "also" & expression != "too" & expression != "again" & expression != "cleft" &
expression != "stop" & expression != "continue") %>%
mutate(context = as.factor(context))
levels(t$context)
# order predicates by difference in EIC-"high" rating
tmp.EIC <- t %>%
filter(context == "explicitIgnorance") %>%
group_by(expression) %>%
summarize(Mean.EIC = mean(response))
tmp.EIC
tmp.HIGH <- t %>%
filter(context == "factH") %>%
group_by(expression) %>%
summarize(Mean.HIGH = mean(response))
tmp.HIGH
tmp = left_join(tmp.EIC,tmp.HIGH)
tmp
tmp$Diff = tmp$Mean.EIC-tmp$Mean.HIGH
tmp
tmp = tmp %>%
mutate(expression = fct_reorder(as.factor(expression),Diff))
tmp
levels(tmp$expression)
nat.means$expression = factor(nat.means$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
t$expression = factor(t$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
levels(nat.means$expression)
levels(t$expression)
# order the contexts: EIC, low, high
levels(nat.means$context)
nat.means$context = factor(nat.means$context, levels = c("explicitIgnorance", "factL", "factH"))
levels(t$context)
t$context = factor(t$context, levels = c("explicitIgnorance", "factL", "factH"))
# color code the expressions
factives <- c("know", "discover", "be annoyed", "reveal", "see")
fillers <- c("too", "also","cleft","again","stop", "continue")
fill.color <- ifelse(levels(nat.means$expression) %in% factives, '#D55E00', "#009E73")
fill.color
# to color the facets differently
library(ggh4x)
strip <- strip_themed(background_x = elem_list_rect(fill = fill.color))
nat.means
# join results of statistical analysis with nat.means
contrasts = read_csv("../data/contrasts.csv")
#view(contrasts)
contrasts = contrasts %>%
select(-c(contrast)) %>%
select(c(expression,context,x,xend,y,yend,linetype)) %>%
mutate(expression = recode(expression,"be.annoyed" = "be annoyed", "be.right" = "be right")) %>%
filter(linetype != 0)
contrasts$context = factor(contrasts$context, levels = c("explicitIgnorance", "factL", "factH"))
contrasts$expression = as.factor(contrasts$expression)
contrasts$linetype <- as.integer(contrasts$linetype)
contrasts$expression = factor(contrasts$expression, levels=tmp$expression[order(tmp$expression)], ordered=TRUE)
# violinplot
ggplot() +
geom_violin(data=t, aes(x=context, y=response, fill = context), scale="width", linewidth = 0) +
geom_point(data=nat.means, aes(x=context, y=Mean, fill = context), shape=21,stroke=.5,size=2, color="black") +
geom_errorbar(data=nat.means,aes(x=context,ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_fill_manual(values=c('gray80',"#56B4E9",'#F0E442'),
name = "Context",
labels=c('explicit ignorance', 'lower prior probability','higher prior probability')) +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(limits = c(-.15,1), breaks = seq(0,1,.2), labels = c("0",".2",".4",".6",".8","1")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank()) +
theme(legend.position="top") +
guides(linetype = "none") +
ylab("Mean naturalness rating") +
xlab("Context") +
facet_wrap2(. ~ expression, nrow = 2, strip = strip) +
theme(panel.grid.minor = element_blank()) +
theme(strip.background = element_rect(fill="white")) +
theme(strip.text = element_text(color = "black")) +
geom_segment(data = contrasts, aes(x=x,xend=xend,y=y,yend=yend, linetype = as.factor(linetype)))
ggsave("../graphs/naturalness-by-context-and-predicate-with-stats.pdf",height=4.5,width=9)
